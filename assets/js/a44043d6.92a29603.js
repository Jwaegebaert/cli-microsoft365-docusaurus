"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[21684],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var a=n.createContext({}),c=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(a.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),d=i,f=u["".concat(a,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,l=new Array(o);l[0]=d;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[u]="string"==typeof e?e:i,l[1]=s;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},69214:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),i=(r(67294),r(3905));const o={tags:["files","reports"]},l="List all checked out files in SharePoint",s={unversionedId:"sample-scripts/spo/list-all-checked-out-files/index",id:"sample-scripts/spo/list-all-checked-out-files/index",title:"List all checked out files in SharePoint",description:"Author: Veronique Lengelle",source:"@site/docs/sample-scripts/spo/list-all-checked-out-files/index.md",sourceDirName:"sample-scripts/spo/list-all-checked-out-files",slug:"/sample-scripts/spo/list-all-checked-out-files/",permalink:"/cli-microsoft365-docusaurus/sample-scripts/spo/list-all-checked-out-files/",draft:!1,editUrl:"https://github.com/pnp/cli-microsoft365/blob/main/docs/docs/sample-scripts/spo/list-all-checked-out-files/index.md",tags:[{label:"files",permalink:"/cli-microsoft365-docusaurus/tags/files"},{label:"reports",permalink:"/cli-microsoft365-docusaurus/tags/reports"}],version:"current",lastUpdatedBy:"Jwaegebaert",lastUpdatedAt:1672784370,formattedLastUpdatedAt:"Jan 3, 2023",frontMatter:{tags:["files","reports"]},sidebar:"sampleScripts",previous:{title:"List all application customizers in a tenant",permalink:"/cli-microsoft365-docusaurus/sample-scripts/spo/list-all-application-customizers/"},next:{title:"List all documents with a specific name within a SharePoint site",permalink:"/cli-microsoft365-docusaurus/sample-scripts/spo/list-all-files-specific-name/"}},a={},c=[{value:"Checked out files in a specific site",id:"checked-out-files-in-a-specific-site",level:2},{value:"Checked out files for a specific document library on a site",id:"checked-out-files-for-a-specific-document-library-on-a-site",level:2},{value:"Checked out files on each document library for multiple sites provided in a CSV file",id:"checked-out-files-on-each-document-library-for-multiple-sites-provided-in-a-csv-file",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"list-all-checked-out-files-in-sharepoint"},"List all checked out files in SharePoint"),(0,i.kt)("p",null,"Author: ",(0,i.kt)("a",{parentName:"p",href:"https://veronicageek.com/2020/find-checked-out-files-across-multiple-site-collections/"},"Veronique Lengelle")),(0,i.kt)("h2",{id:"checked-out-files-in-a-specific-site"},"Checked out files in a specific site"),(0,i.kt)("p",null,"This script will retrieve all the checked out files in a particular site."),(0,i.kt)("p",null,'=== "PowerShell"'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'```powershell\n$m365Status = m365 status --output text\nif ($m365Status -eq "Logged Out") {\n  # Connection to Microsoft 365\n  m365 login\n}\n\n#Declare variables\n$siteURL = "<YOUR-SITE-URL>"\n$allLibs = m365 spo list list --webUrl $siteURL --query "[?BaseTemplate == ``101``]" -o json | ConvertFrom-Json\n$resultsForSite = @()\n\nforeach($library in $allLibs){\n    $allDocs = m365 spo file list --webUrl $siteURL --folder $library.Url --recursive -o json | ConvertFrom-Json\n\n    foreach($document in $allDocs){\n        if($document.CheckOutType -eq [int64]0){\n            $resultsForSite += [pscustomobject][ordered]@{\n                LibraryName = $library.Title\n                DocumentName = $document.Name\n                RelativePath = $document.ServerRelativeUrl\n            }\n        }\n    }\n}\n$resultsForSite\n```\n')),(0,i.kt)("h2",{id:"checked-out-files-for-a-specific-document-library-on-a-site"},"Checked out files for a specific document library on a site"),(0,i.kt)("p",null,"This script will retrieve all the checked out files in a specific document library on a particular site."),(0,i.kt)("p",null,'=== "PowerShell"'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'```powershell\n$m365Status = m365 status --output text\nif ($m365Status -eq "Logged Out") {\n  # Connection to Microsoft 365\n  m365 login\n}\n\n#Declare variables\n$siteURL = "<YOUR-SITE-URL>"\n$libraryName = "<LIBRARY NAME>"  ## Example: "Shared Documents"\n$allDocuments = m365 spo file list --webUrl $siteURL --folder $("$libraryName") --recursive -o json | ConvertFrom-Json\n$resultsForLib = @()\n\n#Loop through each document\nforeach($doc in $allDocuments){\n    if($doc.CheckOutType -eq [int64]0){\n        $resultsForLib += [pscustomobject][ordered]@{\n            LibraryName = $libraryName\n            DocName = $doc.Name\n            RelativePath = $doc.ServerRelativeUrl\n        }\n    }\n}\n$resultsForLib\n```\n')),(0,i.kt)("h2",{id:"checked-out-files-on-each-document-library-for-multiple-sites-provided-in-a-csv-file"},"Checked out files on each document library for multiple sites provided in a CSV file"),(0,i.kt)("p",null,'This script will loop through each site from your CSV file, and retrieve all the checked out files from each document library. Your CSV file should contain a single header called "siteURL" with each URL per row:'),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"siteURL"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://contoso.sharepoint.com/sites/site1"},"https://contoso.sharepoint.com/sites/site1"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://contoso.sharepoint.com/sites/site2"},"https://contoso.sharepoint.com/sites/site2"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://contoso.sharepoint.com/sites/site3"},"https://contoso.sharepoint.com/sites/site3"))))),(0,i.kt)("p",null,"!!! important\nDepending on the number of sites in your .csv file, the number of libraries as well as the number of files, the below script can take a very long time to provide results."),(0,i.kt)("p",null,'=== "PowerShell"'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'```powershell\n$m365Status = m365 status --output text\nif ($m365Status -eq "Logged Out") {\n  # Connection to Microsoft 365\n  m365 login\n}\n\n#Declare variables\n$allSites = Import-Csv -Path "<YOUR-FILE-PATH>"\n$resultsForEachSC = @()\n\nforeach($row in $allsites){\n    #Get the libraries\n    $allLibraries = m365 spo list list --webUrl $row.siteURL --query "[?BaseTemplate == ``101``]" -o json | ConvertFrom-Json\n\n    foreach($lib in $allLibraries){\n\n        #Get all the documents\n        $allDocs = m365 spo file list --webUrl $row.siteURL --folder $lib.Url --recursive -o json | ConvertFrom-Json\n\n        foreach($docu in $allDocs){\n            if($docu.CheckOutType -eq [int64]0){\n                $resultsForEachSC += [pscustomobject][ordered]@{\n                    LibraryName = $lib.Title\n                    DocumentName = $docu.Name\n                    RelativePath = $docu.ServerRelativeUrl\n                }\n            }\n        }\n    }\n}\n$resultsForEachSC\n```\n')))}u.isMDXComponent=!0}}]);