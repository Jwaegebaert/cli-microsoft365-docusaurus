"use strict";(self.webpackChunkcli_for_microsoft_365_docs=self.webpackChunkcli_for_microsoft_365_docs||[]).push([[68243],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var s=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,s,n=function(e,t){if(null==e)return{};var r,s,n={},a=Object.keys(e);for(s=0;s<a.length;s++)r=a[s],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)r=a[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=s.createContext({}),m=function(e){var t=s.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=m(e.components);return s.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},f=s.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=m(r),f=n,d=p["".concat(l,".").concat(f)]||p[f]||u[f]||a;return r?s.createElement(d,o(o({ref:t},c),{},{components:r})):s.createElement(d,o({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:n,o[1]=i;for(var m=2;m<a;m++)o[m]=r[m];return s.createElement.apply(null,o)}return s.createElement.apply(null,r)}f.displayName="MDXCreateElement"},89305:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>m});var s=r(87462),n=(r(67294),r(3905));const a={tags:["teams","reports","users"]},o="Get all the Teams a specific user is part of",i={unversionedId:"sample-scripts/teams/get-all-teams-specific-user-is-part-of/index",id:"sample-scripts/teams/get-all-teams-specific-user-is-part-of/index",title:"Get all the Teams a specific user is part of",description:"Author: Veronique Lengelle",source:"@site/docs/sample-scripts/teams/get-all-teams-specific-user-is-part-of/index.md",sourceDirName:"sample-scripts/teams/get-all-teams-specific-user-is-part-of",slug:"/sample-scripts/teams/get-all-teams-specific-user-is-part-of/",permalink:"/cli-microsoft365-docusaurus/sample-scripts/teams/get-all-teams-specific-user-is-part-of/",draft:!1,editUrl:"https://github.com/pnp/cli-microsoft365/blob/main/docs/docs/sample-scripts/teams/get-all-teams-specific-user-is-part-of/index.md",tags:[{label:"teams",permalink:"/cli-microsoft365-docusaurus/tags/teams"},{label:"reports",permalink:"/cli-microsoft365-docusaurus/tags/reports"},{label:"users",permalink:"/cli-microsoft365-docusaurus/tags/users"}],version:"current",lastUpdatedAt:1671570658,formattedLastUpdatedAt:"Dec 20, 2022",frontMatter:{tags:["teams","reports","users"]},sidebar:"sampleScripts",previous:{title:"Export conversations from Microsoft Teams Channels",permalink:"/cli-microsoft365-docusaurus/sample-scripts/teams/export-teams-conversations/"},next:{title:"Govern orphaned Microsoft Teams",permalink:"/cli-microsoft365-docusaurus/sample-scripts/teams/govern-orphan-teams/"}},l={},m=[{value:"Script",id:"script",level:2},{value:"Function",id:"function",level:2}],c={toc:m},p="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,s.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"get-all-the-teams-a-specific-user-is-part-of"},"Get all the Teams a specific user is part of"),(0,n.kt)("p",null,"Author: ",(0,n.kt)("a",{parentName:"p",href:"https://twitter.com/veronicageek"},"Veronique Lengelle")),(0,n.kt)("h2",{id:"script"},"Script"),(0,n.kt)("p",null,'=== "PowerShell"'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'```powershell\n#Variables\n$logFile = "<YOUR-FILE-PATH>"\n$userToFind = "john.doe@contoso.com"\n$results = @()\n\n#Get all the Teams\n$allTeams = m365 teams team list -o json | ConvertFrom-Json\n\n#Find the user in Azure AD\n$userToFindInAD = m365 aad user get --userName $userToFind -o json | ConvertFrom-Json\n$userToFindID = $userToFindInAD.Id\n\n#Loop thru all the Teams\nforeach($team in $allTeams){\n    $allTeamsUsers = m365 teams user list --teamId $team.Id -o json | ConvertFrom-Json\n    \n    #Loop through users TARGETING THE USER ID TO MATCH\n    foreach ($teamUser in $allTeamsUsers) {\n        if ($teamUser.Id -match $userToFindID) {\n        \n            $results += [pscustomobject]@{\n                userName        = $userToFindInAD.UserPrincipalName\n                userDisplayName = $userToFindInAD.DisplayName\n                userRole        = $teamUser.UserType\n                Team            = $team.DisplayName\n                ArchivedTeam    = $team.isArchived\n                TeamID          = $team.Id\n            }\n        }\n    }    \n}\n$results | Export-Csv -Path $logFile -NoTypeInformation\n```\n')),(0,n.kt)("h2",{id:"function"},"Function"),(0,n.kt)("p",null,'=== "PowerShell"'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'```powershell\n<#\n.SYNOPSIS\n    Get all the Microsoft Teams team(s) a specific user is part of.\n.DESCRIPTION\n    Get all the Microsoft Teams team(s) a specific user is part of, and exports the results into a CSV file.\n.EXAMPLE\n    PS C:\\> Get-TeamsUserIsPartOf -UserToFind "john.doe@contoso.com" -logFile "C:\\users\\$env:USERNAME\\Desktop\\myFileExport.csv"\n.INPUTS\n    Inputs (if any)\n.OUTPUTS\n    Output (if any)\n.NOTES\n    The export will contain the username (UPN), user display name, user role in that Team, Team display name, Team archive status, and the Team Id.\n#>\nfunction Get-TeamsUserIsPartOf {\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory = $true, HelpMessage = "User\'s UPN")]\n        [string]$userToFind,\n        [Parameter(Mandatory = $true, HelpMessage = "Full path of your .csv file to log the results")]\n        [string]$logFile\n    )\n    $results = @()\n\n    #Get all the Teams\n    $allTeams = m365 teams team list -o json | ConvertFrom-Json\n\n    #Find the user in Azure AD\n    $userToFindInAD = m365 aad user get --userName $userToFind -o json | ConvertFrom-Json\n    $userToFindID = $userToFindInAD.Id\n\n    #Loop thru all the Teams\n    foreach($team in $allTeams){\n        $allTeamsUsers = m365 teams user list --teamId $team.Id -o json | ConvertFrom-Json\n        \n        #Loop through users TARGETING THE USER ID TO MATCH\n        foreach ($teamUser in $allTeamsUsers) {\n            if ($teamUser.Id -match $userToFindID) {\n            \n                $results += [pscustomobject]@{\n                    userName        = $userToFindInAD.UserPrincipalName\n                    userDisplayName = $userToFindInAD.DisplayName\n                    userRole        = $teamUser.UserType\n                    Team            = $team.DisplayName\n                    ArchivedTeam    = $team.isArchived\n                    TeamID          = $team.Id\n                }\n            }\n        }    \n    }\n    $results | Export-Csv -Path $logFile -NoTypeInformation\n}\n```\n')))}u.isMDXComponent=!0}}]);