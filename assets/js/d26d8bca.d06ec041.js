"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[79388],{3905:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>f});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),p=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},u=function(e){var r=p(e.components);return t.createElement(l.Provider,{value:r},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||a;return n?t.createElement(f,s(s({ref:r},u),{},{components:n})):t.createElement(f,s({ref:r},u))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},66005:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var t=n(87462),o=(n(67294),n(3905));const a={tags:["users","groups","security","teams"]},s="Replace an owner in a Microsoft 365 Group or Microsoft Team",i={unversionedId:"sample-scripts/aad/replace-owner-with-a-different-one/index",id:"sample-scripts/aad/replace-owner-with-a-different-one/index",title:"Replace an owner in a Microsoft 365 Group or Microsoft Team",description:"Inspired by: Alan Eardley, Patrick Lamber",source:"@site/docs/sample-scripts/aad/replace-owner-with-a-different-one/index.md",sourceDirName:"sample-scripts/aad/replace-owner-with-a-different-one",slug:"/sample-scripts/aad/replace-owner-with-a-different-one/",permalink:"/cli-microsoft365-docusaurus/sample-scripts/aad/replace-owner-with-a-different-one/",draft:!1,editUrl:"https://github.com/pnp/cli-microsoft365/blob/main/docs/docs/sample-scripts/aad/replace-owner-with-a-different-one/index.md",tags:[{label:"users",permalink:"/cli-microsoft365-docusaurus/tags/users"},{label:"groups",permalink:"/cli-microsoft365-docusaurus/tags/groups"},{label:"security",permalink:"/cli-microsoft365-docusaurus/tags/security"},{label:"teams",permalink:"/cli-microsoft365-docusaurus/tags/teams"}],version:"current",lastUpdatedBy:"Jwaegebaert",lastUpdatedAt:1672784370,formattedLastUpdatedAt:"Jan 3, 2023",frontMatter:{tags:["users","groups","security","teams"]},sidebar:"sampleScripts",previous:{title:"Replace a user's membership in selected Microsoft 365 Groups or Teams",permalink:"/cli-microsoft365-docusaurus/sample-scripts/aad/replace-membership-of-selected-groups/"},next:{title:"Microsoft Graph",permalink:"/cli-microsoft365-docusaurus/sample-script/graph"}},l={},p=[],u={toc:p};function c(e){let{components:r,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"replace-an-owner-in-a-microsoft-365-group-or-microsoft-team"},"Replace an owner in a Microsoft 365 Group or Microsoft Team"),(0,o.kt)("p",null,"Inspired by: ",(0,o.kt)("a",{parentName:"p",href:"https://blog.eardley.org.uk/2021/04/managing-teams-movers-and-leavers/"},"Alan Eardley"),", ",(0,o.kt)("a",{parentName:"p",href:"https://www.nubo.eu/Replace-Owners-In-A-Microsoft-Group-Or-Team/"},"Patrick Lamber")),(0,o.kt)("p",null,"Find all the Microsoft 365 Groups that a user is an Owner of and replace them with someone else useful for when an employee leaves and ownership needs to be updated."),(0,o.kt)("p",null,'=== "PowerShell"'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'```powershell\n# This script replaces an owner with a different person in all Microsoft 365 Groups\n$oldUser = "oldUserUpn"\n$newUser = "newUserUpn"\n# Parameters end\n\n$m365Status = m365 status --output text\n\nif ($m365Status -eq "Logged Out") {\n  # Connection to Microsoft 365\n  m365 login\n}\n\n# configure the CLI to output JSON on each execution\nm365 cli config set --key output --value json\nm365 cli config set --key errorOutput --value stdout\nm365 cli config set --key showHelpOnFailure --value false\nm365 cli config set --key printErrorsAsPlainText --value false\n\nfunction Get-CLIValue {\n  [cmdletbinding()]\n  param(\n    [parameter(Mandatory = $true, ValueFromPipeline = $true)]\n    $input\n  )\n    $output = $input | ConvertFrom-Json\n    if ($output.error -ne $null) {\n      throw $output.error\n    }\n    return $output\n}\n\nfunction Replace-Owner {\n    [cmdletbinding()]\n    param(\n        [parameter(Mandatory = $true)]\n        $oldUser,\n        [parameter(Mandatory = $true)]\n        $newUser\n    )\n    $groupsToProcess = m365 aad o365group list | Get-CLIValue  \n    $i = 0\n    $groupsToProcess | ForEach-Object {\n        $group = $_\n        $i++\n        Write-Host "Processing Group ($($group.id)) - $($group.displayName) - ($i/$($groupsToProcess.Length))" -ForegroundColor DarkGray\n\n        $hasOwner = $null\n        # verify if the old user is in the owners list\n        $hasOwner = m365 aad o365group user list --groupId $group.id --query "[?userType==\'Owner\' && userPrincipalName==\'$oldUser\'].[id]" | Get-CLIValue\n        if ($hasOwner -ne $null) {\n            Write-Host "Found $oldUser" -ForegroundColor Green\n            try {\n                Write-Host "Granting $newUser owner rights"\n                m365 aad o365group user add --groupId $group.id --userName $newUser --role Owner | Get-CLIValue\n            }\n            catch  {\n                Write-Host $_.Exception.Message -ForegroundColor White\n            }\n\n            try {\n                Write-Host "Removing $oldUser permissions..."\n                m365 aad o365group user remove --groupId $group.id --userName $oldUser --confirm $false | Get-CLIValue\n            }\n            catch  {\n                Write-Host $_.Exception.Message -ForegroundColor Red\n                continue\n            }\n        }\n    }\n}\n\nReplace-Owner $oldUser $newUser\n```\n')))}c.isMDXComponent=!0}}]);