"use strict";(self.webpackChunkcli_for_microsoft_365_docs=self.webpackChunkcli_for_microsoft_365_docs||[]).push([[90960],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var i=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,s=function(e,t){if(null==e)return{};var n,i,s={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(n),u=s,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return n?i.createElement(f,a(a({ref:t},c),{},{components:n})):i.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[d]="string"==typeof e?e:s,a[1]=r;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93984:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var i=n(87462),s=(n(67294),n(3905));const o={tags:["customizations","provisioning"]},a="Disable specified Tenant-wide Extension",r={unversionedId:"sample-scripts/spo/disable-tenant-wide-extension/index",id:"sample-scripts/spo/disable-tenant-wide-extension/index",title:"Disable specified Tenant-wide Extension",description:"Author: Shantha Kumar T",source:"@site/docs/sample-scripts/spo/disable-tenant-wide-extension/index.md",sourceDirName:"sample-scripts/spo/disable-tenant-wide-extension",slug:"/sample-scripts/spo/disable-tenant-wide-extension/",permalink:"/cli-microsoft365-docusaurus/sample-scripts/spo/disable-tenant-wide-extension/",draft:!1,editUrl:"https://github.com/pnp/cli-microsoft365/blob/main/docs/docs/sample-scripts/spo/disable-tenant-wide-extension/index.md",tags:[{label:"customizations",permalink:"/cli-microsoft365-docusaurus/tags/customizations"},{label:"provisioning",permalink:"/cli-microsoft365-docusaurus/tags/provisioning"}],version:"current",lastUpdatedAt:1677877396,formattedLastUpdatedAt:"Mar 3, 2023",frontMatter:{tags:["customizations","provisioning"]},sidebar:"sampleScripts",previous:{title:"Detecting PII exists in SharePoint List using AWS Comprehend",permalink:"/cli-microsoft365-docusaurus/sample-scripts/spo/detecting-pii-exists-in-sharepointlist-column/"},next:{title:"Download attachments from a SharePoint Online list",permalink:"/cli-microsoft365-docusaurus/sample-scripts/spo/download-attachments-from-list/"}},l={},p=[],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"disable-specified-tenant-wide-extension"},"Disable specified Tenant-wide Extension"),(0,s.kt)("p",null,"Author: ",(0,s.kt)("a",{parentName:"p",href:"https://www.ktskumar.com/2020/04/manage-tenant-wide-extensions-using-office-365-cli/"},"Shantha Kumar T")),(0,s.kt)("p",null,"Tenant Wide Extensions list from the App Catalog helps to manage the activation / deactivation of the tenant wide extensions. The below sample script helps to disable the specified tenant wide extension based on the id parameter."),(0,s.kt)("p",null,"Note: TenantWideExtensionDisabled column denotes the extension is enabled or disabled."),(0,s.kt)("p",null,'=== "PowerShell"'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'```powershell\n$extensionName = Read-Host "Enter the Extension Name"\n$listName = "Tenant Wide Extensions"\n\n$appCatalogUrl = m365 spo tenant appcatalogurl get\n$filterQuery = "Title eq \'" + $extensionName + "\'"\n$appItems = m365 spo listitem list --listTitle $listName --webUrl $appCatalogUrl --fields "Id,Title" --filter $filterQuery --output json\n$extItems = $appItems.Replace("Id", "ExtId") | ConvertFrom-JSON\n\nif ($extItems.count -gt 0) {\n  m365 spo listitem set --listTitle $listName --id $extItems.ExtId --webUrl $appCatalogUrl --TenantWideExtensionDisabled "true" >$null 2>&1\n  Write-Host("Extension disabled.");\n}\nelse {\n  Write-Host("No extensions found with the name \'" + $extensionName + "\'.");\n}\n```\n')),(0,s.kt)("p",null,'=== "Bash"'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'```bash\n#!/bin/bash\n\n# requires jq: https://stedolan.github.io/jq/\n\necho "Enter the extension name to disable: "; read extensionName;\nlistName="Tenant Wide Extensions";\n\nappCatalogUrl=$(m365 spo tenant appcatalogurl get)\nfilterQuery="Title eq \'$extensionName\'"\nappItemsJson=$(m365 spo listitem list --listTitle "$listName" --webUrl "$appCatalogUrl" --fields "Id,Title" --filter "$filterQuery" --output json)\nappItemId=( $(jq -r \'.[].Id\' <<< $appItemsJson))\n\nif [[ $appItemId -gt 0 ]]\nthen\nm365 spo listitem set --listTitle "$listName" --id "$appItemId" --webUrl "$appCatalogUrl" --TenantWideExtensionDisabled "true" >/dev/null 2>&1\necho "Extension disabled."\nelse\n  echo "No extensions found with the name \'$extensionName\'."\nfi\n```\n')))}m.isMDXComponent=!0}}]);