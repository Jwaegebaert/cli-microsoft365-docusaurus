"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[14669],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>y});var r=n(67294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=r.createContext({}),d=function(e){var a=r.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},p=function(e){var a=d(e.components);return r.createElement(l.Provider,{value:a},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},$=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),$=t,y=u["".concat(l,".").concat($)]||u[$]||c[$]||i;return n?r.createElement(y,s(s({ref:a},p),{},{components:n})):r.createElement(y,s({ref:a},p))}));function y(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=n.length,s=new Array(i);s[0]=$;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o[u]="string"==typeof e?e:t,s[1]=o;for(var d=2;d<i;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}$.displayName="MDXCreateElement"},68537:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=n(87462),t=(n(67294),n(3905));const i={tags:["ai","azure","users"]},s="Analyze User Profile Photos using Azure Computer Vision API",o={unversionedId:"sample-scripts/aad/analyze-user-profile-photos/index",id:"sample-scripts/aad/analyze-user-profile-photos/index",title:"Analyze User Profile Photos using Azure Computer Vision API",description:"Author: Joseph Velliah",source:"@site/docs/sample-scripts/aad/analyze-user-profile-photos/index.md",sourceDirName:"sample-scripts/aad/analyze-user-profile-photos",slug:"/sample-scripts/aad/analyze-user-profile-photos/",permalink:"/sample-scripts/aad/analyze-user-profile-photos/",draft:!1,editUrl:"https://github.com/pnp/cli-microsoft365/blob/main/docs/docs/sample-scripts/aad/analyze-user-profile-photos/index.md",tags:[{label:"ai",permalink:"/tags/ai"},{label:"azure",permalink:"/tags/azure"},{label:"users",permalink:"/tags/users"}],version:"current",lastUpdatedBy:"Jwaegebaert",lastUpdatedAt:1672784370,formattedLastUpdatedAt:"Jan 3, 2023",frontMatter:{tags:["ai","azure","users"]},sidebar:"sampleScripts",previous:{title:"Azure Active Directory",permalink:"/sample-script/aad"},next:{title:"Analyze users for known data breaches with have i been pwned",permalink:"/sample-scripts/aad/analyze-users-haveibeenpwnd/"}},l={},d=[],p={toc:d};function u(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",(0,r.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"analyze-user-profile-photos-using-azure-computer-vision-api"},"Analyze User Profile Photos using Azure Computer Vision API"),(0,t.kt)("p",null,"Author: ",(0,t.kt)("a",{parentName:"p",href:"https://sprider.blog/analyze-microsoft-365-user-profile-photos-using-azure-computer-vision-api"},"Joseph Velliah")),(0,t.kt)("p",null,"This script uses Azure Cognitive Service API and Microsoft 365 CLI to analyze user profile pictures and assess whether they meet the standards placed by the organization. It can be customized to ban content within an org channel or collaboration network where employees post pictures, memes, etc."),(0,t.kt)("p",null,"Prerequisites"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://pnp.github.io/cli-microsoft365/"},"CLI for Microsoft 365")),(0,t.kt)("li",{parentName:"ul"},"Microsoft 365 users"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://azure.microsoft.com/services/cognitive-services/computer-vision/"},"Computer Vision API")," instance and API key")),(0,t.kt)("p",null,"!!! note\nIf you don't already have an ",(0,t.kt)("a",{parentName:"p",href:"https://azure.microsoft.com/try/cognitive-services/"},"Azure Cognitive Services instance and key"),", create a cognitive service instance and get API key from there."),(0,t.kt)("p",null,'=== "PowerShell"'),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'```powershell\n$resultDir = "Output"\n$azureVisionApiInstance = "azure-vision-api-instance-name"\n$azureVisionApiKey = "azure-vision-api-key"\n\n$photoRequirements = @{\n    requirePortrait   = $false\n    allowClipart      = $true\n    allowLinedrawing  = $true\n    allowAdult        = $false\n    allowRacy         = $false\n    allowGory         = $false\n    photoRequirements = @{\n        requirePortrait   = $false\n        allowClipart      = $true\n        allowLinedrawing  = $true\n        allowAdult        = $false\n        allowRacy         = $false\n        allowGory         = $false\n        forbiddenKeywords = @("cartoon", `\n                "animal", `\n                "nude", `\n                "child", `\n                "people", `\n                "group", `\n                "family", `\n                "several", `\n                "crowd", `\n                "food", `\n                "restaurant", `\n                "train", `\n                "bus", `\n                "car", `\n                "airplane", `\n                "vehicle", `\n                "platform", `\n                "station", `\n                "standing", `\n                "flying", `\n                "suitcase", `\n                "screenshot", `\n                "newspaper", `\n                "typography", `\n                "font", `\n                "document", `\n                "sport")\n    }\n}\n\n$requiredProfileProperties = "id,displayName,userPrincipalName"\n$global:analysisOutcomes = @()\n\n$executionDir = $PSScriptRoot\n$outputDir = "$executionDir/$resultDir"\n$outputFilePath = "$outputDir/$(get-date -f yyyyMMdd-HHmmss)-scan-profile-pictures-outcome.csv"\n\nif (-not (Test-Path -Path "$outputDir" -PathType Container)) {\n    New-Item -ItemType Directory -Path "$outputDir"\n    Write-Host "Created $outputDir folder..."\n}\nfunction AddAnalysisOutcome {\n    param (\n        [Parameter(Mandatory = $false)] [string] $UserId,\n        [Parameter(Mandatory = $false)] [string] $UserPrincipalName,\n        [Parameter(Mandatory = $false)] [bool] $IsPortraitValid,\n        [Parameter(Mandatory = $false)] [bool] $IsOnlyOnePersonValid,\n        [Parameter(Mandatory = $false)] [bool] $IsClipartValid,\n        [Parameter(Mandatory = $false)] [bool] $IsLineDrawingValid,\n        [Parameter(Mandatory = $false)] [bool] $IsAdultValid,\n        [Parameter(Mandatory = $false)] [bool] $IsRacyValid,\n        [Parameter(Mandatory = $false)] [bool] $IsGoryValid,\n        [Parameter(Mandatory = $false)] [bool] $IsCelebrity,\n        [Parameter(Mandatory = $false)] [bool] $IsForbiddenKeywordExist,\n        [Parameter(Mandatory = $false)] [bool] $IsValidProfilePhoto,\n        [Parameter(Mandatory = $false)] [string] $Notes\n    )\n\n    $analysisOutcome = New-Object -TypeName PSObject\n\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "UserId" -Value $UserId\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "UserPrincipalName" -Value $UserPrincipalName\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "IsPortraitValid" -Value $IsPortraitValid\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "IsOnlyOnePersonValid" -Value $IsOnlyOnePersonValid\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "IsClipartValid" -Value $IsClipartValid\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "IsLineDrawingValid" -Value $IsLineDrawingValid\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "IsAdultValid" -Value $IsAdultValid\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "IsRacyValid" -Value $IsRacyValid\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "IsGoryValid" -Value $IsGoryValid\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "IsCelebrity" -Value $IsCelebrity\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "IsForbiddenKeywordExist" -Value $IsForbiddenKeywordExist\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "IsValidProfilePhoto" -Value $IsValidProfilePhoto\n    $analysisOutcome | Add-Member -MemberType NoteProperty -Name "Notes" -Value $Notes\n\n    $global:analysisOutcomes += $analysisOutcome\n}\n\n$users = m365 aad user list --properties $requiredProfileProperties -o json | ConvertFrom-Json -AsHashtable\n$usersCount = $users.Count\nWrite-Host "Number of users found : $usersCount"\n\ntry {\n    $token = m365 util accesstoken get --resource https://graph.microsoft.com\n\n    $i = 0\n\n    for ($i = 0; $i -lt $usersCount; $i++) {\n        try {\n            $userId = $users[$i].id\n            $userPrincipalName = $users[$i].userPrincipalName\n\n            $percentComplete = ($i / $usersCount) * 100\n            Write-Progress -Activity "Analysing" -Status "User : $userId - $userPrincipalName" -PercentComplete $percentComplete\n\n            try {\n                $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"\n                $headers.Add("Content-Type", "image/jpg")\n                $headers.Add("Authorization", "Bearer $token")\n                $userPhoto = (Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/users/$userId/photo/`$value" -Headers $headers)\n\n                if ($userPhoto) {\n                    try {\n                        $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"\n                        $headers.Add("Content-Type", "application/json")\n                        $headers.Add("Ocp-Apim-Subscription-Key", $azureVisionApiKey)\n\n                        $analysis = (Invoke-RestMethod -Uri ("https://$azureVisionApiInstance.cognitiveservices.azure.com/vision/v3.1/analyze?visualFeatures=Categories,Adult,Tags,Description,Faces,Color,ImageType,Objects&details=Celebrities&language=en") `\n                                -Headers $headers `\n                                -Body ($userPhoto) `\n                                -ContentType "application/octet-stream" `\n                                -Method "Post");\n\n                        if ($analysis) {\n                            $analysisData = $analysis | ConvertFrom-Json -AsHashtable\n                            $isPortrait = $analysisData.categories.Length -gt 0 ? ($analysisData.categories | Where-Object { $_.name -eq \'people_portrait\' }).Length -gt 0  ? $true : $false : $false\n                            $isPortraitValid = $photoRequirements.requirePortrait ? $isPortrait : $true\n                            $isOnlyOnePersonValid = $analysisData.faces.Length -eq 1 ? $true : $false\n                            $isClipartValid = $analysisData.imageType.clipArtType -eq 0 ? $true : $false\n                            $isLineDrawingValid = $analysisData.imageType.lineDrawingType -eq 0 ? $true : $false\n                            $isAdultValid = $photoRequirements.allowAdult ? $true : !$analysisData.adult.isAdultContent\n                            $isRacyValid = $photoRequirements.allowRacy ? $true : !$analysisData.adult.isRacyContent\n                            $isGoryValid = $photoRequirements.allowGory ? $true : !$analysisData.adult.isGoryContent\n                            $isCelebrity = ($analysisData.categories | Where-Object { $_.detail.celebrities.Length -gt 0 }).Length -gt 0 ? $true : $false\n\n                            $invalidKeywords = @()\n\n                            foreach ($forbiddenKeyword in $photoRequirements.forbiddenKeywords) {\n                                $isForbiddenKeywordExist = ($analysisData.tags | Where-Object { $_.name -eq $forbiddenKeyword }).Length -gt 0 ? $true : $false\n\n                                if ($isForbiddenKeywordExist) {\n                                    $invalidKeyword = New-Object -TypeName PSObject\n                                    $invalidKeyword | Add-Member -MemberType NoteProperty -Name forbiddenKeyword -Value $forbiddenKeyword\n                                    $invalidKeywords += $invalidKeyword\n                                }\n                            }\n\n                            $isForbiddenKeywordExist = $invalidKeywords.Length -gt 0 ? $true : $false\n\n                            $isValidProfilePhoto = $isPortraitValid `\n                                -and $isOnlyOnePersonValid `\n                                -and $isClipartValid  `\n                                -and $isLineDrawingValid `\n                                -and $isAdultValid `\n                                -and $isRacyValid `\n                                -and $isGoryValid `\n                                -and !$isCelebrity `\n                                -and !$isForbiddenKeywordExist;\n\n                            AddAnalysisOutcome $userId `\n                                $userPrincipalName `\n                                $isPortraitValid `\n                                $isOnlyOnePersonValid `\n                                $isClipartValid `\n                                $isLineDrawingValid `\n                                $isAdultValid `\n                                $isRacyValid `\n                                $isGoryValid `\n                                $isCelebrity `\n                                $isForbiddenKeywordExist `\n                                $isValidProfilePhoto `\n                                "Profile photo available"\n                        }\n                    }\n                    catch {\n                        AddAnalysisOutcome $userId `\n                            $userPrincipalName `\n                            $false `\n                            $false `\n                            $false `\n                            $false `\n                            $false `\n                            $false `\n                            $false `\n                            $false `\n                            $false `\n                            $false `\n                            "Unable to analyze profile photo"\n                    }\n                }\n            }\n            catch {\n                AddAnalysisOutcome $userId `\n                    $userPrincipalName `\n                    $false `\n                    $false `\n                    $false `\n                    $false `\n                    $false `\n                    $false `\n                    $false `\n                    $false `\n                    $false `\n                    $false `\n                    "Unable to get profile photo"\n            }\n        }\n        catch {\n            Write-Host "Unable to get profile details for this user" -ForegroundColor Red\n        }\n    }\n}\ncatch {\n    Write-Host "Unable to get new access token" -ForegroundColor Red\n}\n\n$global:analysisOutcomes | Export-Csv -Path "$outputFilePath" -NoTypeInformation\nWrite-Host "Open $outputFilePath to review analysis outcomes report."\n```\n')))}u.isMDXComponent=!0}}]);