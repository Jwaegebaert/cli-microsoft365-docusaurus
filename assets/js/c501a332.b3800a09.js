"use strict";(self.webpackChunkcli_for_microsoft_365_docs=self.webpackChunkcli_for_microsoft_365_docs||[]).push([[87184],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(r),d=s,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||a;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[m]="string"==typeof e?e:s,o[1]=c;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},85162:(e,t,r)=>{r.d(t,{Z:()=>o});var n=r(67294),s=r(86010);const a={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:r,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(a.tabItem,o),hidden:r},t)}},74866:(e,t,r)=>{r.d(t,{Z:()=>w});var n=r(87462),s=r(67294),a=r(86010),o=r(12466),c=r(56697),i=r(91980),l=r(67392),u=r(50012);function m(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:s}}=e;return{value:t,label:r,attributes:n,default:s}}))}function p(e){const{values:t,children:r}=e;return(0,s.useMemo)((()=>{const e=t??m(r);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function d(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:r}=e;const n=(0,c.k6)(),a=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,i._X)(a),(0,s.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(n.location.search);t.set(a,e),n.replace({...n.location,search:t.toString()})}),[a,n])]}function b(e){const{defaultValue:t,queryString:r=!1,groupId:n}=e,a=p(e),[o,c]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:a}))),[i,l]=f({queryString:r,groupId:n}),[m,b]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,a]=(0,u.Nk)(r);return[n,(0,s.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:n}),h=(()=>{const e=i??m;return d({value:e,tabValues:a})?e:null})();(0,s.useLayoutEffect)((()=>{h&&c(h)}),[h]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!d({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);c(e),l(e),b(e)}),[l,b,a]),tabValues:a}}var h=r(72389);const $={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:r,selectedValue:c,selectValue:i,tabValues:l}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.o5)(),p=e=>{const t=e.currentTarget,r=u.indexOf(t),n=l[r].value;n!==c&&(m(t),i(n))},d=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const r=u.indexOf(e.currentTarget)+1;t=u[r]??u[0];break}case"ArrowLeft":{const r=u.indexOf(e.currentTarget)-1;t=u[r]??u[u.length-1];break}}t?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":r},t)},l.map((e=>{let{value:t,label:r,attributes:o}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:c===t?0:-1,"aria-selected":c===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:p},o,{className:(0,a.Z)("tabs__item",$.tabItem,o?.className,{"tabs__item--active":c===t})}),r??t)})))}function y(e){let{lazy:t,children:r,selectedValue:n}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===n));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=b(e);return s.createElement("div",{className:(0,a.Z)("tabs-container",$.tabList)},s.createElement(g,(0,n.Z)({},e,t)),s.createElement(y,(0,n.Z)({},e,t)))}function w(e){const t=(0,h.Z)();return s.createElement(v,(0,n.Z)({key:String(t)},e))}},84575:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>f,frontMatter:()=>c,metadata:()=>l,toc:()=>m});var n=r(87462),s=(r(67294),r(3905)),a=r(74866),o=r(85162);const c={tags:["adoption","users"]},i="Recognize most active users for a specific Team",l={unversionedId:"sample-scripts/teams/recognize-most-active-users-specific-team/index",id:"sample-scripts/teams/recognize-most-active-users-specific-team/index",title:"Recognize most active users for a specific Team",description:"Author: Albert-Jan Schot",source:"@site/docs/sample-scripts/teams/recognize-most-active-users-specific-team/index.mdx",sourceDirName:"sample-scripts/teams/recognize-most-active-users-specific-team",slug:"/sample-scripts/teams/recognize-most-active-users-specific-team/",permalink:"/cli-microsoft365-docusaurus/sample-scripts/teams/recognize-most-active-users-specific-team/",draft:!1,editUrl:"https://github.com/pnp/cli-microsoft365/blob/main/docs/docs/sample-scripts/teams/recognize-most-active-users-specific-team/index.mdx",tags:[{label:"adoption",permalink:"/cli-microsoft365-docusaurus/tags/adoption"},{label:"users",permalink:"/cli-microsoft365-docusaurus/tags/users"}],version:"current",lastUpdatedAt:1683150705,formattedLastUpdatedAt:"May 3, 2023",frontMatter:{tags:["adoption","users"]},sidebar:"sampleScripts",previous:{title:"List all Microsoft Teams team's Owners and Members",permalink:"/cli-microsoft365-docusaurus/sample-scripts/teams/list-teams-owners-and-members/"},next:{title:"Removes Microsoft Teams personal app from users and Microsoft Teams app catalog",permalink:"/cli-microsoft365-docusaurus/sample-scripts/teams/remove-personal-app/"}},u={},m=[],p={toc:m},d="wrapper";function f(e){let{components:t,...r}=e;return(0,s.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"recognize-most-active-users-for-a-specific-team"},"Recognize most active users for a specific Team"),(0,s.kt)("p",null,"Author: ",(0,s.kt)("a",{parentName:"p",href:"https://www.cloudappie.nl/recognize-active-team-members-cli-microsoft-365/"},"Albert-Jan Schot")),(0,s.kt)("p",null,"Retrieves all activities for a specific Microsoft Teams Team and shares the top 3 contributors based on their score as an adaptive card to the specified webhook url."),(0,s.kt)(a.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"PowerShell",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-powershell"},'$teamId = "<PUTYOURTEAMIDHERE>"\n$webhookUrl = "<PUTYOURURLHERE>"\n# You can get a delta of messages since the last \'n\' days. Currently set to seven. You can go back a maximum of 8 months.\n$date = (get-date).AddDays(-7).ToString("yyyy-MM-ddTHH:mm:ssZ")\n\n$channels = m365 teams channel list --teamId $teamId --output json | ConvertFrom-Json\n$results = @()\n$scoreResults = @()\n\n$channelCounter = 0;\n\nforeach ($channel in $channels) {\n\n    $channelCounter++;\n    Write-Output "Processing channel... $channelCounter/$($channels.Length)"\n\n    $messages = m365 teams message list --teamId $teamId --channelId $channel.id --since $date --output json | ConvertFrom-Json\n\n    $messageCounter = 0;\n\n    foreach ($message in $messages) {\n        $messageCounter++\n        Write-Output "Processing message ... $messageCounter/$($messages.Length)"\n\n        # Skip messages that are created with an application (bots / adaptive cards)\n        if ($null -ne $message.from.user.id) {\n            $results += [pscustomobject][ordered]@{\n                Type       = "Post"\n                Details    = $message.reactionType\n                UserId     = $message.from.user.id\n                HasSubject = $($null -ne $message.subject)\n            }\n        }\n\n        # Process all likes and comments on the initial message\n        foreach ($reaction in $message.reactions) {\n            $results += [pscustomobject][ordered]@{\n                Type    = "Reaction"\n                Details = $reaction.reactionType\n                UserId  = $reaction.user.user.id\n            }\n        }\n\n        $replies = m365 teams message reply list --teamId $teamId --channelId $channel.id --messageId $message.Id --output json | ConvertFrom-Json\n\n        foreach ($reply in $replies) {\n            # Skip replies that are created with an application (bots)\n            if ($null -ne $message.from.user.id) {\n                $results += [pscustomobject][ordered]@{\n                    Type   = "Reply"\n                    UserId = $reply.from.user.id\n                }\n            }\n\n            # Process all likes and comments on the reply message\n            foreach ($reaction in $reply.reactions) {\n                $results += [pscustomobject][ordered]@{\n                    Type    = "Reaction"\n                    Details = $reaction.reactionType\n                    UserId  = $reaction.user.user.id\n                }\n            }\n\n        }\n    }\n}\n\n# Group the results per user\n$resultsGrouped = $results | Group-Object -Property UserId\n\n#Score per user\nforeach ($teamsUser in $resultsGrouped) {\n    $user = m365 aad user get --id $teamsUser.UserId --output json | ConvertFrom-Json\n\n    # Count points\n    # Each  post is two points, 1 extra point awarded for each Post with Subject\n    # Each reply 1 and each reaction 0.5\n    $score = (($teamsUser.Group | Where-Object { $_.Type -eq "Post" }).Count * 2)\n    $score += (($teamsUser.Group | Where-Object { $_.HasSubject }).Count)\n    $score += ($teamsUser.Group | Where-Object { $_.Type -eq "Reply" }).Count\n    $score += (($teamsUser.Group | Where-Object { $_.Type -eq "Reaction" }).Count / 2)\n\n    $scoreResults += [pscustomobject][ordered]@{\n        DisplayName       = $user.displayName\n        UserPrincipalName = $user.userPrincipalName\n        Score             = $score;\n    }\n}\n\n# Sort our score report based on the score\n$scoreResults = $scoreResults | Sort-Object { $_.score } -Descending\n\n#Construct adaptive card\n$title = "\ud83c\udfc6 Most active team members"\n$scoreJson = \'{   \\"title\\": \\"\ud83e\udd47 \'+$($scoreResults[0].DisplayName)+\'\\",   \\"value\\": \\"\' + $($scoreResults[0].score) + \'\\"   }\'\n\nif($scoreResults[1]){\n    $scoreJson += \',{   \\"title\\": \\"\ud83e\udd48 \'+$($scoreResults[1].DisplayName)+\'\\",   \\"value\\": \\"\' + $($scoreResults[1].score) + \'\\"   }\'\n}\nif($scoreResults[2]){\n    $scoreJson += \',{   \\"title\\": \\"\ud83e\udd49 \'+$($scoreResults[2].DisplayName)+\'\\",   \\"value\\": \\"\' + $($scoreResults[2].score) + \'\\"   }\'\n}\n\n$card = \'{ \\"type\\": \\"AdaptiveCard\\", \\"$schema\\": \\"http://adaptivecards.io/schemas/adaptive-card.json\\", \\"version\\": \\"1.2\\", \\"body\\": [  {  \\"type\\": \\"TextBlock\\",  \\"text\\": \\"\' + $($title) + \'\\",  \\"wrap\\": true,  \\"size\\": \\"Medium\\",  \\"weight\\": \\"Bolder\\",  \\"color\\": \\"Attention\\"  },  {  \\"type\\": \\"TextBlock\\",  \\"wrap\\": true,  \\"text\\": \\"Week \' + $(get-date -UFormat %V) + \'\\",  \\"fontType\\": \\"Default\\",  \\"size\\": \\"Small\\",  \\"weight\\": \\"Lighter\\",  \\"isSubtle\\": true  },  {  \\"type\\": \\"FactSet\\",  \\"facts\\": [   \' + $scoreJson + \'  ]  } ] }\'\n\nm365 adaptivecard send --url $webhookUrl --card $card\n')))))}f.isMDXComponent=!0}}]);