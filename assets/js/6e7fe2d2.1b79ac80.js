"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[84332],{3905:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>h});var o=n(67294);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function t(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?t(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,o,s=function(e,r){if(null==e)return{};var n,o,s={},t=Object.keys(e);for(o=0;o<t.length;o++)n=t[o],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)n=t[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=o.createContext({}),c=function(e){var r=o.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},l=function(e){var r=c(e.components);return o.createElement(p.Provider,{value:r},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},d=o.forwardRef((function(e,r){var n=e.components,s=e.mdxType,t=e.originalType,p=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),m=c(n),d=s,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||t;return n?o.createElement(h,i(i({ref:r},l),{},{components:n})):o.createElement(h,i({ref:r},l))}));function h(e,r){var n=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var t=n.length,i=new Array(t);i[0]=d;var a={};for(var p in r)hasOwnProperty.call(r,p)&&(a[p]=r[p]);a.originalType=e,a[m]="string"==typeof e?e:s,i[1]=a;for(var c=2;c<t;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9386:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var o=n(87462),s=(n(67294),n(3905));const t={tags:["security"]},i="Grant API permissions to SharePoint Azure AD Application",a={unversionedId:"sample-scripts/spo/grant-api-permissions-aad/index",id:"sample-scripts/spo/grant-api-permissions-aad/index",title:"Grant API permissions to SharePoint Azure AD Application",description:"Author: Micha\xebl Maillot",source:"@site/docs/sample-scripts/spo/grant-api-permissions-aad/index.md",sourceDirName:"sample-scripts/spo/grant-api-permissions-aad",slug:"/sample-scripts/spo/grant-api-permissions-aad/",permalink:"/sample-scripts/spo/grant-api-permissions-aad/",draft:!1,editUrl:"https://github.com/pnp/cli-microsoft365/blob/main/docs/docs/sample-scripts/spo/grant-api-permissions-aad/index.md",tags:[{label:"security",permalink:"/tags/security"}],version:"current",lastUpdatedBy:"Jwaegebaert",lastUpdatedAt:1672784370,formattedLastUpdatedAt:"Jan 3, 2023",frontMatter:{tags:["security"]},sidebar:"sampleScripts",previous:{title:"Export Configurations of Tenant Wide Extensions",permalink:"/sample-scripts/spo/export-configs-tenant-wide-extensions/"},next:{title:"Hide SharePoint list from Site Contents",permalink:"/sample-scripts/spo/hide-list-from-site-contents/"}},p={},c=[],l={toc:c};function m(e){let{components:r,...n}=e;return(0,s.kt)("wrapper",(0,o.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"grant-api-permissions-to-sharepoint-azure-ad-application"},"Grant API permissions to SharePoint Azure AD Application"),(0,s.kt)("p",null,"Author: ",(0,s.kt)("a",{parentName:"p",href:"https://michaelmaillot.github.io"},"Micha\xebl Maillot")),(0,s.kt)("p",null,"When developing your SPFx components, you usually first run them locally before deploying them (really ?)."),(0,s.kt)("p",null,"And then comes the time to work with API such as Microsoft Graph."),(0,s.kt)("p",null,"If you never use those permissions before in your SPFx projects (and the tenant with which you're working), you realize that you have to:"),(0,s.kt)("p",null,"Add required API permissions in your ",(0,s.kt)("inlineCode",{parentName:"p"},"package-solution.json")," file"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Bundle / Ship your project"),(0,s.kt)("li",{parentName:"ul"},"Publish it"),(0,s.kt)("li",{parentName:"ul"},"Go to the SharePoint Admin Center Web API Permissions page"),(0,s.kt)("li",{parentName:"ul"},"Approve those permissions")),(0,s.kt)("p",null,"All of this, just to play with the API as you didn't plan to release your package in a production environment."),(0,s.kt)("p",null,"So what if you could bypass all these steps for both Graph and owned API?"),(0,s.kt)("p",null,"!!! important\nThis trick is just for development purposes. In Production environment, you should update your ",(0,s.kt)("inlineCode",{parentName:"p"},"package-solution.json")," file to add required permissions and allow them (or ask for validation) in the ",(0,s.kt)("em",{parentName:"p"},"API access")," page."),(0,s.kt)("p",null,"!!! warning\nThese permissions will be granted on the whole tenant and could be used by any script running in your tenant. More info ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aadhttpclient#considerations"},"here"),"."),(0,s.kt)("p",null,'=== "PowerShell"'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'```powershell\nm365 login # Don\'t execute that command if you\'re already logged in\n\n# Granting Microsoft Graph permissions\n$resourceName = "Microsoft Graph"\n$msGraphPermissions = @(\n  "Mail.Read",\n  "People.Read",\n  "User.ReadWrite"\n)\n\n$progress = 0\n$total = $msGraphPermissions.Count\n\nForEach ($permission in $msGraphPermissions) {\n  $progress++\n  Write-Host $progress / $total":" $permission\n    \n  # If permission already granted, you\'ll face an OAuth permission issue\n  # So you can test the presence of the scope for the requested resource to prevent the error\n  $scopeToAdd = m365 spo sp grant list --query "[?Resource == \'${resourceName}\' && Scope == \'${permission}\']"\n  if ($scopeToAdd -eq "") {\n    m365 spo serviceprincipal grant add --resource "$resourceName" --scope "$permission"\n    Write-Host "Permission \'${permission}\' for Resource \'${resourceName}\' granted" -ForegroundColor Green\n  }\n  else {\n    Write-Host "Permission \'${permission}\' for Resource \'${resourceName}\' already granted" -ForegroundColor Yellow \n  }\n}\n\n# Granting custom permissions\n$resourceName = "contoso-api"\n$customPermissions = @(\n  "user_impersonation",\n  "random_permission"\n)\n\n$progress = 0\n$total = $customPermissions.Count\n\nForEach ($permission in $customPermissions) {\n  $progress++\n  Write-Host $progress / $total":" $permission\n\n  # If permission already granted, you\'ll face an OAuth permission issue\n  # So you can test the presence of the scope for the requested resource to prevent the error\n  $scopeToAdd = m365 spo sp grant list --query "[?Resource == \'${resourceName}\' && Scope == \'${permission}\']"\n  if ($scopeToAdd -eq "") {\n    m365 spo serviceprincipal grant add --resource "$resourceName" --scope "$permission"\n    Write-Host "Permission \'${permission}\' for Resource \'${resourceName}\' granted" -ForegroundColor Green\n  }\n  else {\n    Write-Host "Permission \'${permission}\' for Resource \'${resourceName}\' already granted" -ForegroundColor Yellow \n  }\n}\n```\n')),(0,s.kt)("p",null,'=== "Bash"'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'```bash\n#!/bin/bash\n\n# color formatting for echo\nNOCOLOR=\'\\033[0m\'\nYELLOW=\'\\033[1;33m\'\nGREEN=\'\\033[0;32m\'\n\nm365 login # Don\'t execute that command if you\'re already logged in\n\n# Granting Microsoft Graph permissions\nresourceName="Microsoft Graph"\nmsGraphPermissions=("Mail.Read" "People.Read" "User.ReadWrite")\n\nprogress=0\ntotal=${#msGraphPermissions[@]}\n\nfor permission in "${msGraphPermissions[@]}"; do\n  ((progress++))\n  printf \'%s / %s:%s\\n\' "$progress" "$total" "$permission"\n\n  # If permission already granted, you\'ll face an OAuth permission issue\n  # So you can test the presence of the scope for the requested resource to prevent the error\n  scopeToAdd=$( m365 spo sp grant list --query "[?Resource == \'$resourceName\' && Scope == \'${permission}\']" )\n  if [ "$( [ -z "$scopeToAdd" ] && echo "Empty" )" == "Empty" ]; then\n    m365 spo serviceprincipal grant add --resource "$resourceName" --scope "$permission"\n    echo -e "${GREEN}Permission \'${permission}\' for Resource \'${resourceName}\' granted${NOCOLOR}"\n  else\n    echo -e "${YELLOW}Permission \'${permission}\' for Resource \'${resourceName}\' already granted${NOCOLOR}"\n  fi\ndone\n\n# Granting custom permissions\nresourceName="contoso-api"\ncustomPermissions=("user_impersonation" "random_permission")\n\nprogress=0\ntotal=${#customPermissions[@]}\n\nfor permission in "${customPermissions[@]}"; do\n  ((progress++))\n  printf \'%s / %s:%s\\n\' "$progress" "$total" "$permission"\n  \n  # If permission already granted, you\'ll face an OAuth permission issue\n  # So you can test the presence of the scope for the requested resource to prevent the error\n  scopeToAdd=$( m365 spo sp grant list --query "[?Resource == \'$resourceName\' && Scope == \'${permission}\']" )\n  if [ "$( [ -z "$scopeToAdd" ] && echo "Empty" )" == "Empty" ]; then\n    m365 spo serviceprincipal grant add --resource "$resourceName" --scope "$permission"\n    echo -e "${GREEN}Permission \'${permission}\' for Resource \'${resourceName}\' granted${NOCOLOR}"\n  else\n    echo -e "${YELLOW}Permission \'${permission}\' for Resource \'${resourceName}\' already granted${NOCOLOR}"\n  fi\ndone\n```\n')))}m.isMDXComponent=!0}}]);