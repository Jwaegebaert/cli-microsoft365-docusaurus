"use strict";(self.webpackChunkcli_for_microsoft_365_docs=self.webpackChunkcli_for_microsoft_365_docs||[]).push([[49663],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=r,h=p["".concat(i,".").concat(f)]||p[f]||u[f]||s;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=f;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},86430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const s={tags:["migration","teams"]},o="Export all channels in Microsoft Teams teams in the tenant",l={unversionedId:"sample-scripts/teams/export-all-channels-teams/index",id:"sample-scripts/teams/export-all-channels-teams/index",title:"Export all channels in Microsoft Teams teams in the tenant",description:"Author: Sudharsan Kesavanarayanan",source:"@site/docs/sample-scripts/teams/export-all-channels-teams/index.md",sourceDirName:"sample-scripts/teams/export-all-channels-teams",slug:"/sample-scripts/teams/export-all-channels-teams/",permalink:"/cli-microsoft365-docusaurus/sample-scripts/teams/export-all-channels-teams/",draft:!1,editUrl:"https://github.com/pnp/cli-microsoft365/blob/main/docs/docs/sample-scripts/teams/export-all-channels-teams/index.md",tags:[{label:"migration",permalink:"/cli-microsoft365-docusaurus/tags/migration"},{label:"teams",permalink:"/cli-microsoft365-docusaurus/tags/teams"}],version:"current",lastUpdatedAt:1671570658,formattedLastUpdatedAt:"Dec 20, 2022",frontMatter:{tags:["migration","teams"]},sidebar:"sampleScripts",previous:{title:"Deploy Microsoft Teams app from Azure DevOps",permalink:"/cli-microsoft365-docusaurus/sample-scripts/teams/deploy-teams-app/"},next:{title:"Export conversations from Microsoft Teams Channels",permalink:"/cli-microsoft365-docusaurus/sample-scripts/teams/export-teams-conversations/"}},i={},c=[],m={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"export-all-channels-in-microsoft-teams-teams-in-the-tenant"},"Export all channels in Microsoft Teams teams in the tenant"),(0,r.kt)("p",null,"Author: ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/sudharsank"},"Sudharsan Kesavanarayanan")),(0,r.kt)("p",null,"Export all the channels from Microsoft Team in a CSV."),(0,r.kt)("p",null,'=== "PowerShell"'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'```powershell\nfunction Get-Channels(\n    [Parameter(Mandatory = $false)][string] $teamID,\n    [Parameter(Mandatory = $false)][string] $teamName \n) {\n    if(!$teamID -and !$teamName) {\n        Write-Error "Either \'teamID\' or \'teamName\' is required"\n        return\n    }\n    $channels = $null\n    if($teamID) {\n        $channels = m365 teams channel list --teamId $teamID -o \'json\' | ConvertFrom-Json\n    } \n    if($teamName) {\n        $channels = m365 teams channel list --teamName $teamName -o \'json\' | ConvertFrom-Json\n    }\n    Write-Output $channels.length\n    if($channels.length -gt 0) {\n        $results = @()\n        foreach($channel in $channels) {\n            $results += [pscustomobject][ordered]@{\n                ID = $channel.id\n                "Display Name" = $channel.displayName\n                Description = $channel.description\n                Email = $channel.email\n                WebURL = $channel.weburl\n            }\n        }\n        Write-Host "Exporting file to $fileExportPath.."\n        $results | Export-Csv -Path "Channels.csv" -NoTypeInformation\n        Write-Host "Completed."\n    } else {\n        Write-Information "No channels found!"\n    }\n}\n\nWrite-Host "Ensure logged in"\n$m365Status = m365 status --output text\nif ($m365Status -eq "Logged Out") {\n    Write-Host "Logging in the User!"\n    m365 login --authType browser\n}\n\nGet-Channels -teamName "<Team Name>"\nGet-Channels -teamID "<Team ID>"\n```\n')))}u.isMDXComponent=!0}}]);