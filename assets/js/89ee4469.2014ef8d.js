"use strict";(self.webpackChunkcli_for_microsoft_365_docs=self.webpackChunkcli_for_microsoft_365_docs||[]).push([[98735],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>d});var t=n(67294);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function u(e,r){if(null==e)return{};var n,t,s=function(e,r){if(null==e)return{};var n,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=t.createContext({}),p=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},c=function(e){var r=p(e.components);return t.createElement(i.Provider,{value:r},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},g=t.forwardRef((function(e,r){var n=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),l=p(n),g=s,d=l["".concat(i,".").concat(g)]||l[g]||m[g]||o;return n?t.createElement(d,a(a({ref:r},c),{},{components:n})):t.createElement(d,a({ref:r},c))}));function d(e,r){var n=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=g;var u={};for(var i in r)hasOwnProperty.call(r,i)&&(u[i]=r[i]);u.originalType=e,u[l]="string"==typeof e?e:s,a[1]=u;for(var p=2;p<o;p++)a[p]=n[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},36103:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var t=n(87462),s=(n(67294),n(3905));const o={tags:["users","reports","groups"]},a="Scan for Microsoft 365 Groups created with user's first or last name",u={unversionedId:"sample-scripts/aad/flag-groups-with-user-names/index",id:"sample-scripts/aad/flag-groups-with-user-names/index",title:"Scan for Microsoft 365 Groups created with user's first or last name",description:"Author: Joseph Velliah",source:"@site/docs/sample-scripts/aad/flag-groups-with-user-names/index.md",sourceDirName:"sample-scripts/aad/flag-groups-with-user-names",slug:"/sample-scripts/aad/flag-groups-with-user-names/",permalink:"/cli-microsoft365-docusaurus/sample-scripts/aad/flag-groups-with-user-names/",draft:!1,editUrl:"https://github.com/pnp/cli-microsoft365/blob/main/docs/docs/sample-scripts/aad/flag-groups-with-user-names/index.md",tags:[{label:"users",permalink:"/cli-microsoft365-docusaurus/tags/users"},{label:"reports",permalink:"/cli-microsoft365-docusaurus/tags/reports"},{label:"groups",permalink:"/cli-microsoft365-docusaurus/tags/groups"}],version:"current",lastUpdatedAt:1671570658,formattedLastUpdatedAt:"Dec 20, 2022",frontMatter:{tags:["users","reports","groups"]},sidebar:"sampleScripts",previous:{title:"Delete all Microsoft 365 groups and SharePoint sites",permalink:"/cli-microsoft365-docusaurus/sample-scripts/aad/delete-m365-groups-and-sharepoint-sites/"},next:{title:"Bulk add/remove users to Microsoft Teams and Microsoft 365 Groups",permalink:"/cli-microsoft365-docusaurus/sample-scripts/aad/manage-group-users/"}},i={},p=[],c={toc:p},l="wrapper";function m(e){let{components:r,...n}=e;return(0,s.kt)(l,(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"scan-for-microsoft-365-groups-created-with-users-first-or-last-name"},"Scan for Microsoft 365 Groups created with user's first or last name"),(0,s.kt)("p",null,"Author: ",(0,s.kt)("a",{parentName:"p",href:"https://sprider.blog/governance-scan-office-365-groups-created-with-user-first-or-last-name-using-office-365-cli-commands"},"Joseph Velliah")),(0,s.kt)("p",null,"We can use the group naming policy to enforce a consistent naming strategy for groups created by users in our organization. A naming policy can help us and our users identify the function of the group. We can use the policy to block specific words from being used in group names and aliases. But what if we need to find out the list of Microsoft 365 groups created with user\u2019s givenName or surname as their mail?"),(0,s.kt)("p",null,"This sample script scans the Microsoft 365 groups that may contain user\u2019s first or last name as the group mail."),(0,s.kt)("p",null,"Note: The filter condition can be changed as per your requirement."),(0,s.kt)("p",null,'=== "PowerShell"'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'```powershell\n$groupsToFlag = @()\n\n$users = m365 aad user list --properties \'displayName,givenName,surname\' -o json | ConvertFrom-Json\n$groups = m365 aad o365group list -o json | ConvertFrom-Json\n\nforeach ($user in $users) {\n  $userGivenName = $user.givenName\n  $userSurname = $user.surname\n\n  if ($userGivenName -and $userSurname) {\n    $groupsMatch = $groups | Where-Object { $_.mail -like "*$userGivenName*" -or $_.mail -like "*$userSurname*" }\n\n    foreach ($group in $groupsMatch) {\n      $groupObject = New-Object -TypeName PSObject\n      $groupObject | Add-Member -MemberType NoteProperty -Name "groupId" -Value $group.id\n      $groupObject | Add-Member -MemberType NoteProperty -Name "groupMail" -Value $group.mail\n      $groupObject | Add-Member -MemberType NoteProperty -Name "userGivenName" -Value $userGivenName\n      $groupObject | Add-Member -MemberType NoteProperty -Name "userSurname" -Value $userSurname\n      $groupsToFlag += $groupObject\n    }\n  }\n}\n\n$groupsToFlag | Format-Table -AutoSize\n```\n')),(0,s.kt)("p",null,'=== "Bash"'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"```bash\n#!/bin/bash\n# requires jq: https://stedolan.github.io/jq/\n\ndefaultIFS=$IFS\nIFS=$'\\n'\n\ngroupsToFlag=()\nusers=`m365 aad user list --properties 'displayName,givenName,surname' -o json`\ngroups=`m365 aad o365group list  -o json`\n\nfor user in `echo $users | jq -c '.[]'`; do\n  userGivenName=`echo $user | jq -r '.givenName'`\n  userSurname=`echo $user | jq -r '.surname'`\n\n  if [ ! -z \"$userGivenName\" ] || [ !-z \"$userSurname\" ] then\n    groupsMatch=$(echo $groups | jq -c --arg GivenName \"$userGivenName\" --arg Surname \"$userSurname\" 'map(select((.mail|ascii_downcase|contains($GivenName|ascii_downcase)) or (.mail|ascii_downcase|contains($Surname|ascii_downcase))))')\n\n    for group in `echo $groupsMatch | jq -c '.[]'`; do \n      groupId=`echo $group | jq  -r '.id'`\n      groupMail=`echo $group | jq  -r '.mail'`\n      groupObject=$(jq -n -c \\\n        --arg GroupId \"$groupId\" \\\n        --arg GroupMail \"$groupMail\" \\\n        --arg UserGivenName \"$userGivenName\" \\\n        --arg UserSurname \"$userSurname\" \\\n        '{groupId: $GroupId, groupMail: $GroupMail, userGivenName: $UserGivenName, userSurname: $UserSurname}')\n\n      groupsToFlag+=($groupObject)\n    done\n  fi\ndone\n\necho ${groupsToFlag[@]} | jq -csr '(.[0] |keys_unsorted | @tsv), (.[]|.|map(.) |@tsv)' | column -s$'\\t' -t\n\nIFS=defaultIFS\nexit 1\n```\n")))}m.isMDXComponent=!0}}]);