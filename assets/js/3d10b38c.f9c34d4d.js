"use strict";(self.webpackChunkcli_for_microsoft_365_docs=self.webpackChunkcli_for_microsoft_365_docs||[]).push([[44310],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(r),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},85162:(e,t,r)=>{r.d(t,{Z:()=>i});var n=r(67294),o=r(86010);const a={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:r,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(a.tabItem,i),hidden:r},t)}},74866:(e,t,r)=>{r.d(t,{Z:()=>v});var n=r(87462),o=r(67294),a=r(86010),i=r(12466),s=r(56697),l=r(91980),c=r(67392),u=r(50012);function m(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:o}}=e;return{value:t,label:r,attributes:n,default:o}}))}function p(e){const{values:t,children:r}=e;return(0,o.useMemo)((()=>{const e=t??m(r);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function d(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:r}=e;const n=(0,s.k6)(),a=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,l._X)(a),(0,o.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(n.location.search);t.set(a,e),n.replace({...n.location,search:t.toString()})}),[a,n])]}function h(e){const{defaultValue:t,queryString:r=!1,groupId:n}=e,a=p(e),[i,s]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:a}))),[l,c]=f({queryString:r,groupId:n}),[m,h]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,a]=(0,u.Nk)(r);return[n,(0,o.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:n}),b=(()=>{const e=l??m;return d({value:e,tabValues:a})?e:null})();(0,o.useLayoutEffect)((()=>{b&&s(b)}),[b]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!d({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),h(e)}),[c,h,a]),tabValues:a}}var b=r(72389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:r,selectedValue:s,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,i.o5)(),p=e=>{const t=e.currentTarget,r=u.indexOf(t),n=c[r].value;n!==s&&(m(t),l(n))},d=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const r=u.indexOf(e.currentTarget)+1;t=u[r]??u[0];break}case"ArrowLeft":{const r=u.indexOf(e.currentTarget)-1;t=u[r]??u[u.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":r},t)},c.map((e=>{let{value:t,label:r,attributes:i}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:p},i,{className:(0,a.Z)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":s===t})}),r??t)})))}function $(e){let{lazy:t,children:r,selectedValue:n}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===n));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=h(e);return o.createElement("div",{className:(0,a.Z)("tabs-container",y.tabList)},o.createElement(g,(0,n.Z)({},e,t)),o.createElement($,(0,n.Z)({},e,t)))}function v(e){const t=(0,b.Z)();return o.createElement(w,(0,n.Z)({key:String(t)},e))}},17682:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var n=r(87462),o=(r(67294),r(3905)),a=r(74866),i=r(85162);const s={tags:["files","listitems"]},l="How to perform operations if a command is not covered by the CLI for Microsoft 365",c={unversionedId:"sample-scripts/spo/how-to-perform-operations-not-covered-by-cli-for-microsoft-365/index",id:"sample-scripts/spo/how-to-perform-operations-not-covered-by-cli-for-microsoft-365/index",title:"How to perform operations if a command is not covered by the CLI for Microsoft 365",description:"Author: Joseph Velliah",source:"@site/docs/sample-scripts/spo/how-to-perform-operations-not-covered-by-cli-for-microsoft-365/index.mdx",sourceDirName:"sample-scripts/spo/how-to-perform-operations-not-covered-by-cli-for-microsoft-365",slug:"/sample-scripts/spo/how-to-perform-operations-not-covered-by-cli-for-microsoft-365/",permalink:"/cli-microsoft365-docusaurus/sample-scripts/spo/how-to-perform-operations-not-covered-by-cli-for-microsoft-365/",draft:!1,editUrl:"https://github.com/pnp/cli-microsoft365/blob/main/docs/docs/sample-scripts/spo/how-to-perform-operations-not-covered-by-cli-for-microsoft-365/index.mdx",tags:[{label:"files",permalink:"/cli-microsoft365-docusaurus/tags/files"},{label:"listitems",permalink:"/cli-microsoft365-docusaurus/tags/listitems"}],version:"current",lastUpdatedAt:1685025201,formattedLastUpdatedAt:"May 25, 2023",frontMatter:{tags:["files","listitems"]},sidebar:"sampleScripts",previous:{title:"Hide SharePoint list from Site Contents",permalink:"/cli-microsoft365-docusaurus/sample-scripts/spo/hide-list-from-site-contents/"},next:{title:"Insert pictures in a SharePoint Document Library into a Word document",permalink:"/cli-microsoft365-docusaurus/sample-scripts/spo/insert-sp-library-pictures-into-word/"}},u={},m=[],p={toc:m},d="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-perform-operations-if-a-command-is-not-covered-by-the-cli-for-microsoft-365"},"How to perform operations if a command is not covered by the CLI for Microsoft 365"),(0,o.kt)("p",null,"Author: ",(0,o.kt)("a",{parentName:"p",href:"https://blog.josephvelliah.com/spol-download-attachments-from-list-items-using-cli-for-microsoft-365"},"Joseph Velliah")),(0,o.kt)("p",null,"One of the most powerful tools a Microsoft 365 user has is the CLI for Microsoft 365. The command line allows any user to get a lot of things done in a fast way. There is no boundary to the number of things a seasoned user can do by merely using the CLI for Microsoft 365."),(0,o.kt)("p",null,"This script shows how to perform operations if a command is not covered by the CLI for Microsoft 365."),(0,o.kt)("p",null,"Right now, AttachmentFiles property associated with a SharePoint list item is not available in CLI for Microsoft 365, so we need to execute a separate query to ",(0,o.kt)("inlineCode",{parentName:"p"},"/_api/web/lists/getByTitle('list-title')/items(item-id)/AttachmentFiles")," endpoint to get the item attachments."),(0,o.kt)("p",null,"To call AttachmentFiles endpoint, we must acquire an access token from the Microsoft identity platform. To do this we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"m365 util accesstoken get")," command and attach the access token with AttachmentFiles endpoint as shown in this script."),(0,o.kt)("p",null,"Prerequisites:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pnp.github.io/cli-microsoft365/"},"CLI for Microsoft 365")),(0,o.kt)("li",{parentName:"ul"},"SharePoint Online site with list item attachments")),(0,o.kt)(a.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"PowerShell",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-powershell"},'Function Get-ListAttachments() {\n    param\n    (\n        [Parameter(Mandatory = $true)] [string] $AccessToken,\n        [Parameter(Mandatory = $true)] [string] $SiteURL,\n        [Parameter(Mandatory = $true)] [string] $ListTitle,\n        [Parameter(Mandatory = $true)] [int] $ItemId\n    )   \n    Try {\n        $ListItemAttachmentsEndPoint = "$($SiteURL)/_api/web/lists/getbytitle(\'$($ListTitle)\')/items($($ItemId))/AttachmentFiles"\n        $Header = @{\n            "Authorization" = "Bearer $($AccessToken)"\n            "Accept"        = "application/json; odata=verbose" \n            "Content-Type"  = "application/json "\n        }\n        $ListItemAttachments = Invoke-RestMethod -Uri $ListItemAttachmentsEndPoint -Headers $Header -Method Get  \n        return $ListItemAttachments.d.results\n    }\n    Catch {\n        throw "Error Getting List Item Attachments! $($_.Exception.Message)" \n    }\n}\nFunction Download-ListAttachments() {\n    param\n    (\n        [Parameter(Mandatory = $true)] [string] $TenantName,\n        [Parameter(Mandatory = $true)] [string] $SiteURL,\n        [Parameter(Mandatory = $true)] [string] $ListTitle,\n        [Parameter(Mandatory = $true)] [string] $DownloadDirectory\n    )   \n    Try {\n\n        #Get All Items from the List\n        $ListItems = m365 spo listitem list --webUrl $SiteURL --listTitle $ListTitle -o json | ConvertFrom-Json -AsHashtable\n         \n        #Iterate through each list item\n        Foreach ($Item in $ListItems) {\n            Try {\n                Write-Output "Processing Item Id $($Item.Id)"\n\n                # Right now AttachmentFiles property is not available in cli-microsoft365 so we need to execute a separate query to /_api/web/lists/getByTitle(\'list-title\')/items(item-id)/AttachmentFiles to get the item attachments. \n                # AttachmentFiles endpoint requires access token \n                $AccessToken = m365 util accesstoken get --resource "https://$($TenantName).sharepoint.com" --new \n\n                #Get All attachments from the List Item\n                $Attachments = Get-ListAttachments -AccessToken $AccessToken -SiteURL $SiteURL -ListTitle $ListTitle -ItemId $Item.Id\n\n                If ($Attachments.Length -gt 0) {\n                    #Create directory for each list item if it doesn\'t exist\n                    $TargetDownloadDirectory = "$($DownloadDirectory)/$($Item.Id)"\n                    If (!(Test-Path -path $TargetDownloadDirectory)) { New-Item $TargetDownloadDirectory -type Directory | Out-Null }\n\n                    foreach ($Attachment in $Attachments) {\n                        Try {\n                            Write-Output "Downloading $($Attachment.FileName)"\n                            $TargetFilePath = "$($TargetDownloadDirectory)/$($Attachment.FileName)"\n                            #Download attachment\n                            m365 spo file get --webUrl $SiteURL --url $Attachment.ServerRelativeUrl --asFile --path $TargetFilePath\n                        }\n                        Catch {\n                            Write-Error "Error Downloading This Attachment! $($_.Exception.Message)" \n                        }\n                    }\n                }\n                else {\n                    Write-Warning "Attachments Not Found For This List Item!"\n                }\n            }\n            Catch {\n                Write-Error "Error Downloading This List Item Attachments! $($_.Exception.Message)"\n            }\n        }\n    }\n    Catch {\n        Write-Error "Error Downloading List Attachments! $($_.Exception.Message)"\n    }\n}\n\n#Set Parameters\n$TenantName = "tenant-name"\n$SiteRelativePath = "site-relative-path"\n$ListTitle = "list-title"\n\n$DownloadDirectory = "$($PSScriptRoot)/$($ListTitle)"\n$SiteURL = "https://$($TenantName).sharepoint.com/$($SiteRelativePath)"\n\n#Call the function to download list items attachments\nDownload-ListAttachments -TenantName $TenantName -SiteURL $SiteURL -ListTitle $ListTitle -DownloadDirectory $DownloadDirectory\n')))))}f.isMDXComponent=!0}}]);